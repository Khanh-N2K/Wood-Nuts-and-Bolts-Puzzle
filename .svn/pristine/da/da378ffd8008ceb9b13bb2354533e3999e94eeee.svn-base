using System.Collections.Generic;
using UnityEngine;

public class Bolt : MonoBehaviour
{
    private BoltModel model;

    private WallHole wallHole;
    private List<PlateHole> plateHoles = new();
    private List<HingeJoint2D> joints = new();

    private void Awake()
    {
        this.LoadReferences();
    }

    private void LoadReferences()
    {
        this.model = transform.GetComponentInChildren<BoltModel>();
    }

    public void AnimatePickBolt()
    {
        this.model.ShowRedSign(true);
    }

    public void AnimatePinBolt()
    {
        this.model.ShowRedSign(false);
    }

    public void TryPinBolt(WallHole wallHole, PlateHole[] plateHoles, Plate[] plates)
    {
        if (wallHole.GetPinnedBolt() != null)
        {
            if (wallHole.GetPinnedBolt() != InputManager.Instance.PickingBolt)
                InputManager.Instance.PickBolt(wallHole.GetPinnedBolt());
            else
                InputManager.Instance.FreePickingBolt();
            return;
        }

        if(plates.Length != plateHoles.Length)
        {
            InputManager.Instance.FreePickingBolt();
            return;
        }

        if (plateHoles.Length == 0)
        {
            this.PinToNewHoles(wallHole, plateHoles);
        } else
        {
            if (!this.CanPin(wallHole, plateHoles))
                return;

            this.PinToNewHoles(wallHole, plateHoles);
        }

        InputManager.Instance.FreePickingBolt();
    }

    private bool CanPin(WallHole wallHole, PlateHole[] plateHoles)
    {
        foreach (PlateHole hole in plateHoles)
        {
            if (hole.GetPinnedBolt() != null)
                return false;
            if (Vector2.Distance(wallHole.transform.position, hole.transform.position) >= Config.Instance.HolesMinThreshold)
                return false;
        }

        return true;
    }

    private void PinToNewHoles(WallHole wallHole, PlateHole[] plateHoles)
    {
        this.ChangeWallHole(wallHole);
        this.ReplacePlateHoles(plateHoles);
        this.SetNewPositions(wallHole);
    }

    public void ChangeWallHole(WallHole wallHole)
    {
        this.wallHole?.PinBolt(null);
        this.wallHole = wallHole;
        this.wallHole.PinBolt(this);
    }

    public void AddPlateHole(PlateHole plateHole)
    {
        this.plateHoles.Add(plateHole);
    }

    private void ReplacePlateHoles(PlateHole[] plateHoles)
    {
        foreach(PlateHole oldHole in this.plateHoles)
            oldHole.PinBolt(null);
        this.plateHoles.Clear();
        foreach (PlateHole newHole in plateHoles)
        {
            this.plateHoles.Add(newHole);
            newHole.PinBolt(this);
        }
    }

    private void SetNewPositions(WallHole wallHole)
    {
        transform.position = wallHole.transform.position;
    }

    public void SetJoint(Rigidbody2D plateBody)
    {
        HingeJoint2D newJoint = gameObject.AddComponent<HingeJoint2D>();
        newJoint.connectedBody = plateBody;
        newJoint.enableCollision = false;
        this.joints.Add(newJoint);
    }

    public void RemoveJoint(Rigidbody2D plateBody)
    {
        foreach(HingeJoint2D joint in this.joints)
        {
            if (joint.connectedBody == plateBody)
            {
                this.joints.Remove(joint);
                Destroy(joint);
                break;
            }
        }
    }
}